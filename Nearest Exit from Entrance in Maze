class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& e) {
        
        int n = maze.size();
        int m = maze[0].size();
        
        queue<pair<int,int>> Q;
        
        pair<int, int> dirs[4] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        
        
        Q.push({e[0], e[1]});
       
        Q.push({-1,-1});
        int ans=0;
        
        while(!Q.empty())
        {
            auto cur = Q.front();
            Q.pop();
            
            int x = cur.first;
            int y = cur.second;
            
            if(!Q.empty())
            {
                if(x==-1 && y==-1)
                {  
                    Q.push({-1,-1});
                    ans++;
                }
            }
            
           
            if((x != e[0] || y != e[1]) && (x == 0 || x == n-1 || y == 0 || y == m-1) )
                    return ans;
            
            for(auto dir: dirs)
            {
                int nx = x + dir.first;
                int ny = y + dir.second;
                
                if(nx>=0 && nx<n && ny>=0 && ny<m && maze[nx][ny]=='.')
                {
                    Q.push({nx,ny});
                    maze[nx][ny] = '-';
                }
            }
            
        }
        
        return -1;
            
        
        
    }
};
