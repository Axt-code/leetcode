
// DFS
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        vector<int> adj[n];
        for(int i=0;i<connections.size();i++)
        {
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);
        }
        int cp = 0;
        int vis[n];
        memset(vis,0,sizeof(vis));
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0)
            {
                cp++;
                queue<int> q;
                q.push(i);
                vis[i]=1;
                while(!q.empty())
                {
                    int u = q.front();
                    q.pop();
                    vis[u]=1;
                    for(int j=0;j<adj[u].size();j++)
                    {
                        if(vis[adj[u][j]]==0)
                        {
                            vis[adj[u][j]]=1;
                            q.push(adj[u][j]);
                        }
                    }
                }
            }
        
        }
        if(n-1<=connections.size())
            return cp-1;
        return -1;
    }
};

//BFS
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        vector<int> adj[n];
        for(int i=0;i<connections.size();i++)
        {
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);
        }
        int cp = 0;
        int vis[n];
        memset(vis,0,sizeof(vis));
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0)
            {
                cp++;
                queue<int> q;
                q.push(i);
                vis[i]=1;
                while(!q.empty())
                {
                    int u = q.front();
                    q.pop();
                    vis[u]=1;
                    for(int j=0;j<adj[u].size();j++)
                    {
                        if(vis[adj[u][j]]==0)
                        {
                            vis[adj[u][j]]=1;
                            q.push(adj[u][j]);
                        }
                    }
                }
            }
        
        }
        if(n-1<=connections.size())
            return cp-1;
        return -1;
    }
};
