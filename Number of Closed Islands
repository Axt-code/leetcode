class Solution {
public:
    int n, m;
    
    void dfs(vector<vector<int>> &grid, int i, int j, int *f)
    {
        int ans=0;
        
        if(i<0 || i>=n || j<0 || j>=m)
        {
            *f=0;
            return;
        }
            
        
        if(grid[i][j]==1)
            return;
        
        else
        {
            grid[i][j]=1;
            
            dfs(grid, i+1, j, f) ; 
            dfs(grid, i-1, j, f) ;
            dfs(grid, i, j+1, f) ;
            dfs(grid, i, j-1, f) ;
            return;
        }
        
    }
    int closedIsland(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        
        int ans=0;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]==0)
                {
                   int flag=1;
                    dfs(grid, i, j, &flag);
                    if(flag==1)
                    {
                        ans++;
                    }
                }
            }
        }
        return ans;
    }
};
