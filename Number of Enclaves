class Solution {
public:
    int n, m;
    
    void dfs(vector<vector<int>> &grid, int i, int j, int* f, int *c)
    {
         
        
        if(i<0 || i>=n || j<0 || j>=m)
        {
            *f=0;
            *c=0;
           // cout<<"x "<<i<<" y "<<j<<" 1. f "<<*f<<" c "<<*c<<endl; 
            return;
        }
            
        
        if(grid[i][j]==0)
            return;
        
        else
        {
            //cout<<"x "<<i<<" y "<<j<<endl;
           // cout<<"x "<<i<<" y "<<j<<" 2. f "<<*f<<" c "<<*c<<endl; 
            grid[i][j]=0;
            if(*f!=0)
            {    *c+=1;
                // cout<<"x "<<i<<" y "<<j<<" 3. f "<<*f<<" c "<<*c<<endl; 
            }
            dfs(grid, i+1, j, f, c) ; 
            dfs(grid, i-1, j, f, c) ;
            dfs(grid, i, j+1, f, c) ;
            dfs(grid, i, j-1, f, c) ;
            return;
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
         n = grid.size();
         m = grid[0].size();
        
        int ans=0;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]==1)
                {
                    int flag=1;
                    int count=0;
                    dfs(grid, i, j, &flag, &count);
                    if(flag==1)
                    {
                        ans+=count;
                    }
                }
            }
        }
        return ans;
    }
};
