//DFS
class Solution {
public:
    int Row, Col;
    void dfs(vector<vector<int>>&grid, int i, int j, int* ans)
    {
        if(i<0|| i>=Row || j<0 || j>=Col || grid[i][j]==0)
            return ;
        
        else
        {
             *ans += grid[i][j];
             grid[i][j]=0;
             
             dfs(grid, i+1, j, ans );
             dfs(grid, i-1, j, ans ); 
             dfs(grid, i, j+1, ans ); 
             dfs(grid, i, j-1, ans ); 
             //cout<<"ans "<<*ans<<endl;
             return;
             //return ans;
            
        }
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        Row = grid.size(); 
        Col = grid[0].size();
        
        int count=0;
        int maxArea=0;
        for(int i = 0; i<Row; i++)
        {
            
            for(int j = 0; j<Col; j++)
            {
                
                if(grid[i][j] == 1)
                {
                    //cout<<"count "<<count<<endl;
                    dfs(grid, i, j, &count);
                   // cout<<"count "<<count<<endl;
                    maxArea = max(count, maxArea);
                    //cout<<"maxArea "<<maxArea<<endl;
                    count=0;
                }
                
            }
        }
        return maxArea;
    }
};















//DFS

class Solution {
public:
    int Row, Col;
    int dfs(vector<vector<int>>&grid, int i, int j)
    {
      if(i<0|| i>=Row || j<0 || j>=Col || grid[i][j]==0)
        return 0;
        
      else
      {
             
        grid[i][j]=0;
             
        return 1 + dfs(grid, i+1, j) + dfs(grid, i-1, j) + dfs(grid, i, j+1) + dfs(grid, i, j-1);
             
       }
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        Row = grid.size(); 
        Col = grid[0].size();
        
        int count=0;
        int maxArea=0;
        for(int i = 0; i<Row; i++)
        {
            
            for(int j = 0; j<Col; j++)
            {
                
                if(grid[i][j] == 1)
                {
                    maxArea = max(dfs(grid, i, j), maxArea);  
                }
                
            }
        }
        return maxArea;
    }
};



///BFS
class Solution {
public:
    
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, -1, 0, 1};
    
    int bfs(vector<vector<int>>& grid, int i, int j, int area) {
        grid[i][j] = 0;
        
        queue<pair<int, int>> q;
        q.push({i, j});
        
        while(!q.empty()) {
            pair <int, int> p = q.front();
            q.pop();
            
            int x= p.first;
            int y = p.second;
            
            for(int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                
                if(nx < 0 || nx >= grid.size() || ny < 0 || ny >= grid[0].size() || grid[nx][ny] == 0) continue;
                else {
                    area++;
                    q.push({nx, ny});
                    grid[nx][ny] = 0;
                }
            }
        }
        return area;
        
    }
    
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans = 0;
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j] == 1)
                    ans = max(ans, bfs(grid, i, j, 1));
            }
        }
        return ans;
    }
};
