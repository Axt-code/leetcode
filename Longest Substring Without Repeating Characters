// Slinding Window 
// TC: O(2*n) Sc: O(n)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        int n= s.length();
        if(n==0) return 0;
       // cout<<n<<endl;
        int mlen=1;
        int len=1;
        
        int l=0,r=1;
        
        set<char> st;
        st.insert(s[0]);
      
        while(l<=r && r<n)
        {
             
            if(st.find(s[r]) == st.end())
            {
               
                st.insert(s[r]);
                len = r-l+1;
                mlen=max(mlen, len);
                r++;
            }
            else
            {
                st.erase(s[l]);
                l++;
            }
          
        }
        
        return mlen;
    }
};


//Better optimized
//TC: O(n) Sc:O(n)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> mp(255, -1);
        int l=0, r=0;
        int n = s.length();
        int len=1;
        while(r<n)
        {
            if(mp[s[r]]!=-1) l=max(mp[s[r]] + 1, l);
             
            mp[s[r]] = r;
            
            len = max(r-l+1, len);
            r++;
        }
        
        return len;
        
    }
};
