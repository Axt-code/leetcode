//LEVELORDER ITERATIVE
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    void leveltrav(vector<vector<Node*>> & levelArray, Node* root)
    {
        vector<Node*> v; 
        queue<Node*> Q;
        Q.push(root);
        Q.push(NULL);
        
        while(!Q.empty())
        {
            if(Q.front()==NULL)
            {
                Q.pop();
                levelArray.push_back(v);
                v.clear();
                if(!Q.empty())
                {
                    Q.push(NULL);
                }
                continue;
                
            }
            
            Node* NewNode = Q.front();
            Q.pop();
            v.push_back(NewNode);
            if(NewNode->left) Q.push(NewNode->left);
            if(NewNode->right) Q.push(NewNode->right);
        }
        return ;
    }
    Node* connect(Node* root) {
        if(!root ) return NULL;
       vector<vector<Node*>> levelArray;
        
        leveltrav(levelArray, root);
        
        for(int i=0;i<levelArray.size();i++)
        {
            for(int j=0;j<levelArray[i].size();j++)
            {
               // cout<<levelArray[i][j]->val<<" ";
                if(j==levelArray[i].size()-1)
                {
                    levelArray[i][j]->next=NULL;
                }
                else
                {
                     levelArray[i][j]->next=levelArray[i][j+1];
                }
               //   cout<<levelArray[i][j]->val<<" ";
               
            }
           // cout<<endl;
        }
        
        return root;
    }
};


//PREORDER RECURSIVE
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    void preorder(Node* root, Node* parent, bool isleftchild)
    {
        //codition 1
        if(!root) return;
        
        //codition 2
        else if(!parent)
            root->next= NULL;
        
        //codition 3
        else if(isleftchild)
            root->next = parent->right;
        
        //codition 4
        else{
            
            //codition 4.1
            if(parent->next==NULL)
                root->next=NULL;
            
            //codition 4.2
            else
                root->next=parent->next->left;
        }
        
        
        preorder(root->left, root, true);
        preorder(root->right, root, false);
    }
    Node* connect(Node* root) {
        preorder(root, nullptr, NULL);
        return root;
    }
};
